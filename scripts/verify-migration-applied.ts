/**
 * Script de v√©rification que la migration Building Profile Role a √©t√© appliqu√©e
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function verifyMigration() {
  try {
    console.log('üîç V√©rification de la Migration Building Profile Role')
    console.log('=====================================================\n')

    await prisma.$connect()
    console.log('‚úÖ Connexion √©tablie\n')

    // 1. V√©rifier l'enum
    console.log('1. V√©rification de l\'enum building_profile_role...')
    try {
      const enumValues = await prisma.$queryRaw<Array<{ unnest: string }>>`
        SELECT unnest(enum_range(NULL::building_profile_role)) as unnest
      `
      console.log(`   ‚úÖ Enum existe avec valeurs: ${enumValues.map(v => v.unnest).join(', ')}`)
    } catch (e: any) {
      console.log(`   ‚ùå Enum manquant: ${e.message}`)
      return false
    }

    // 2. V√©rifier les colonnes
    console.log('\n2. V√©rification des colonnes...')
    try {
      const columns = await prisma.$queryRaw<Array<{
        column_name: string
        data_type: string
      }>>`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'building_profiles' 
          AND column_name IN ('role', 'parent_profile_id', 'lot_number', 'tenant_data')
        ORDER BY column_name
      `
      const expectedColumns = ['role', 'parent_profile_id', 'lot_number', 'tenant_data']
      const foundColumns = columns.map(c => c.column_name)
      const missingColumns = expectedColumns.filter(c => !foundColumns.includes(c))
      
      if (missingColumns.length === 0) {
        console.log(`   ‚úÖ Toutes les colonnes existent (${columns.length}/4)`)
        columns.forEach(col => {
          console.log(`      - ${col.column_name} (${col.data_type})`)
        })
      } else {
        console.log(`   ‚ùå Colonnes manquantes: ${missingColumns.join(', ')}`)
        return false
      }
    } catch (e: any) {
      console.log(`   ‚ùå Erreur v√©rification colonnes: ${e.message}`)
      return false
    }

    // 3. V√©rifier l'index unique
    console.log('\n3. V√©rification de l\'index unique...')
    try {
      const index = await prisma.$queryRaw<Array<{
        indexname: string
        indexdef: string
      }>>`
        SELECT indexname, indexdef 
        FROM pg_indexes 
        WHERE tablename = 'building_profiles' 
          AND indexname = 'building_profiles_unique_proprietaire_per_bien_idx'
      `
      if (index.length > 0) {
        console.log(`   ‚úÖ Index unique cr√©√©`)
        console.log(`      ${index[0].indexname}`)
      } else {
        console.log(`   ‚ùå Index unique manquant`)
        return false
      }
    } catch (e: any) {
      console.log(`   ‚ùå Erreur v√©rification index: ${e.message}`)
      return false
    }

    // 4. V√©rifier l'index parent_profile_id
    console.log('\n4. V√©rification de l\'index parent_profile_id...')
    try {
      const index = await prisma.$queryRaw<Array<{
        indexname: string
      }>>`
        SELECT indexname 
        FROM pg_indexes 
        WHERE tablename = 'building_profiles' 
          AND indexname = 'building_profiles_parent_profile_id_idx'
      `
      if (index.length > 0) {
        console.log(`   ‚úÖ Index parent_profile_id cr√©√©`)
      } else {
        console.log(`   ‚ö†Ô∏è  Index parent_profile_id manquant (non bloquant)`)
      }
    } catch (e: any) {
      console.log(`   ‚ö†Ô∏è  Erreur v√©rification index parent: ${e.message}`)
    }

    // 5. V√©rifier la contrainte foreign key
    console.log('\n5. V√©rification de la contrainte foreign key...')
    try {
      const constraint = await prisma.$queryRaw<Array<{
        constraint_name: string
      }>>`
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'building_profiles' 
          AND constraint_name = 'building_profiles_parent_profile_id_fkey'
      `
      if (constraint.length > 0) {
        console.log(`   ‚úÖ Contrainte foreign key cr√©√©e`)
      } else {
        console.log(`   ‚ö†Ô∏è  Contrainte foreign key manquante (non bloquante)`)
      }
    } catch (e: any) {
      console.log(`   ‚ö†Ô∏è  Erreur v√©rification contrainte: ${e.message}`)
    }

    // 6. V√©rifier les donn√©es existantes
    console.log('\n6. V√©rification des donn√©es existantes...')
    try {
      const profiles = await prisma.$queryRaw<Array<{
        role: string
        count: bigint
      }>>`
        SELECT role, COUNT(*)::bigint as count
        FROM building_profiles 
        GROUP BY role
      `
      if (profiles.length > 0) {
        console.log(`   üìä Profils existants:`)
        profiles.forEach(prof => {
          console.log(`      - ${prof.role}: ${prof.count}`)
        })
      } else {
        console.log(`   ‚ÑπÔ∏è  Aucun profil existant (normal si base vide)`)
      }
    } catch (e: any) {
      console.log(`   ‚ö†Ô∏è  Erreur v√©rification donn√©es: ${e.message}`)
    }

    console.log('\nüéâ V√©rification termin√©e avec succ√®s !')
    console.log('\n‚úÖ La migration Building Profile Role est appliqu√©e et op√©rationnelle.\n')
    
    return true
  } catch (error: any) {
    console.error('\n‚ùå Erreur lors de la v√©rification:', error.message)
    return false
  } finally {
    await prisma.$disconnect()
  }
}

verifyMigration()
  .then((success) => {
    process.exit(success ? 0 : 1)
  })
  .catch((error) => {
    console.error('‚ùå Erreur fatale:', error)
    process.exit(1)
  })

