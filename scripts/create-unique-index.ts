/**
 * Script pour cr√©er l'index unique Building Profile Role
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createIndex() {
  try {
    console.log('üîß Cr√©ation de l\'index unique Building Profile Role...\n')
    
    await prisma.$connect()
    console.log('‚úÖ Connexion √©tablie\n')

    // Supprimer l'index s'il existe d√©j√†
    console.log('üßπ Suppression de l\'index existant (si pr√©sent)...')
    await prisma.$executeRawUnsafe(`
      DROP INDEX IF EXISTS building_profiles_unique_proprietaire_per_bien_idx;
    `)
    console.log('   ‚úÖ Index supprim√© (si existant)\n')

    // Cr√©er l'index unique
    console.log('üî® Cr√©ation de l\'index unique...')
    await prisma.$executeRawUnsafe(`
      CREATE UNIQUE INDEX building_profiles_unique_proprietaire_per_bien_idx
      ON building_profiles (
        parcelle_number, 
        section_cadastrale, 
        COALESCE(lot_number, ''),
        role
      )
      WHERE role = 'PROPRIETAIRE'
        AND parcelle_number IS NOT NULL
        AND section_cadastrale IS NOT NULL;
    `)
    console.log('   ‚úÖ Index unique cr√©√©\n')

    // V√©rifier
    console.log('üîç V√©rification...')
    const index = await prisma.$queryRaw<Array<{
      indexname: string
    }>>`
      SELECT indexname 
      FROM pg_indexes 
      WHERE tablename = 'building_profiles' 
        AND indexname = 'building_profiles_unique_proprietaire_per_bien_idx'
    `

    if (index.length > 0) {
      console.log('   ‚úÖ Index v√©rifi√© et pr√©sent\n')
      console.log('üéâ Index unique cr√©√© avec succ√®s !\n')
    } else {
      console.log('   ‚ùå Index non trouv√© apr√®s cr√©ation\n')
      process.exit(1)
    }

  } catch (error: any) {
    console.error('\n‚ùå Erreur:', error.message)
    
    if (error.message.includes('already exists')) {
      console.log('\n‚ö†Ô∏è  L\'index existe d√©j√†, c\'est normal.\n')
    } else {
      process.exit(1)
    }
  } finally {
    await prisma.$disconnect()
  }
}

createIndex()
  .then(() => {
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Erreur fatale:', error)
    process.exit(1)
  })

